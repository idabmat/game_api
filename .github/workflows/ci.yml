name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: 1.10.2
          otp-version: 22.2
      - name: Cache dependencies directory
        uses: actions/cache@v1
        env:
          cache-name: cache-deps-directory
        with:
          path: deps
          key: ${{ runner.os }}-deps-${{ env.cache-name }}-${{ hashFiles('mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ env.cache-name }}-${{ hashFiles('mix.lock') }}
            ${{ runner.os }}-deps-${{ env.cache-name }}-
            ${{ runner.os }}-deps-
      - name: Install Dependencies
        run: mix deps.get
      - name: Cache build directory
        uses: actions/cache@v1
        env:
          cache-name: cache-build-directory
        with:
          path: _build
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
            ${{ runner.os }}-build-
      - name: Compile
        run: mix compile
  lint:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: 1.10.2
          otp-version: 22.2
      - name: Cache dependencies directory
        uses: actions/cache@v1
        env:
          cache-name: cache-deps-directory
        with:
          path: deps
          key: ${{ runner.os }}-deps-${{ env.cache-name }}-${{ hashFiles('mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ env.cache-name }}-${{ hashFiles('mix.lock') }}
            ${{ runner.os }}-deps-${{ env.cache-name }}-
            ${{ runner.os }}-deps-
      - name: Install Dependencies
        run: mix deps.get
      - name: Cache build directory
        uses: actions/cache@v1
        env:
          cache-name: cache-build-directory
        with:
          path: _build
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
            ${{ runner.os }}-build-
      - name: Check Format
        run: mix format --check-formatted
  credo:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: 1.10.2
          otp-version: 22.2
      - name: Cache dependencies directory
        uses: actions/cache@v1
        env:
          cache-name: cache-deps-directory
        with:
          path: deps
          key: ${{ runner.os }}-deps-${{ env.cache-name }}-${{ hashFiles('mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ env.cache-name }}-${{ hashFiles('mix.lock') }}
            ${{ runner.os }}-deps-${{ env.cache-name }}-
            ${{ runner.os }}-deps-
      - name: Install Dependencies
        run: mix deps.get
      - name: Cache build directory
        uses: actions/cache@v1
        env:
          cache-name: cache-build-directory
        with:
          path: _build
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
            ${{ runner.os }}-build-
      - name: Check Style
        run: mix credo --strict
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: 1.10.2
          otp-version: 22.2
      - name: Cache dependencies directory
        uses: actions/cache@v1
        env:
          cache-name: cache-deps-directory
        with:
          path: deps
          key: ${{ runner.os }}-deps-${{ env.cache-name }}-${{ hashFiles('mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ env.cache-name }}-${{ hashFiles('mix.lock') }}
            ${{ runner.os }}-deps-${{ env.cache-name }}-
            ${{ runner.os }}-deps-
      - name: Install Dependencies
        run: mix deps.get
      - name: Cache build directory
        uses: actions/cache@v1
        env:
          cache-name: cache-build-directory
        with:
          path: _build
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
            ${{ runner.os }}-build-
      - name: Run Tests
        run: mix test
  type_check:
    needs: [lint, credo, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: 1.10.2
          otp-version: 22.2
      - name: Cache dependencies directory
        uses: actions/cache@v1
        env:
          cache-name: cache-deps-directory
        with:
          path: deps
          key: ${{ runner.os }}-deps-${{ env.cache-name }}-${{ hashFiles('mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ env.cache-name }}-${{ hashFiles('mix.lock') }}
            ${{ runner.os }}-deps-${{ env.cache-name }}-
            ${{ runner.os }}-deps-
      - name: Install Dependencies
        run: mix deps.get
      - name: Cache dialyzer directory
        uses: actions/cache@v1
        env:
          cache-name: cache-dialyzer-directory
        with:
          path: _build
          key: ${{ runner.os }}-dialyzer-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-dialyzer-${{ env.cache-name }}
            ${{ runner.os }}-dialyzer-
      - name: Check Types
        run: mix dialyzer --halt-exit-status
  deploy:
    needs: type_check
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Gigalixir CLI
        run: |
          sudo pip install gigalixir --ignore-installed six
          echo 'export PATH=~/.local/bin:$PATH' >> ~/.bash_profile
          source ~/.bash_profile
      - name: Setup Gigalixir
        env:
          GIGALIXIR_USER: ${{ secrets.GIGALIXIR_USER }}
          GIGALIXIR_TOKEN: ${{ secrets.GIGALIXIR_TOKEN }}
          GIGALIXIR_APP: ${{ secrets.GIGALIXIR_APP }}
        run: |
          git remote add gigalixir https://git.gigalixir.com/$GIGALIXIR_APP.git
          cat >> ~/.netrc <<EOF
          machine api.gigalixir.com
            login $GIGALIXIR_USER
            password $GIGALIXIR_TOKEN
          machine git.gigalixir.com
            login $GIGALIXIR_USER
            password $GIGALIXIR_TOKEN
          EOF
      - name: Deploy
        run: |
          git fetch --unshallow origin
          git push gigalixir master
